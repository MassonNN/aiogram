# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, masogram Team
# This file is distributed under the same license as the masogram package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: masogram \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-14 14:13+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../dispatcher/filters/callback_data.rst:3
msgid "Callback Data Factory & Filter"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData:1
msgid "Base class for callback data wrapper"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData:3
msgid "This class should be used as super-class of user-defined callbacks."
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData:5
msgid "The class-keyword :code:`prefix` is required to define prefix and also the argument :code:`sep` can be passed to define separator (default is :code:`:`)."
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.pack:1
msgid "Generate callback data string"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.filter:0
#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.pack:0
#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.unpack:0
msgid "Returns"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.pack:3
msgid "valid callback data for Telegram Bot API"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.unpack:1
msgid "Parse callback data string"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.filter:0
#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.unpack:0
msgid "Parameters"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.unpack:3
msgid "value from Telegram"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.unpack:4
msgid "instance of CallbackData"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.filter:1
msgid "Generates a filter for callback query with rule"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.filter:3
msgid "magic rule"
msgstr ""

#: ../../../masogram/filters/callback_data.py:docstring of masogram.filters.callback_data.CallbackData.filter:4
msgid "instance of filter"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:11
msgid "Usage"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:13
msgid "Create subclass of :code:`CallbackData`:"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:21
msgid "After that you can generate any callback based on this class, for example:"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:29
msgid "So... Now you can use this class to generate any callbacks with defined structure"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:41
msgid "... and handle by specific rules"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:52
msgid "Also can be used in :doc:`Keyboard builder </utils/keyboard>`:"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:63
msgid "Another abstract example:"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:101
msgid "Known limitations"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:103
msgid "Allowed types and their subclasses:"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:105
msgid ":code:`str`"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:106
msgid ":code:`int`"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:107
msgid ":code:`bool`"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:108
msgid ":code:`float`"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:109
msgid ":code:`Decimal`  (:code:`from decimal import Decimal`)"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:110
msgid ":code:`Fraction`  (:code:`from fractions import Fraction`)"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:111
msgid ":code:`UUID` (:code:`from uuid import UUID`)"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:112
msgid ":code:`Enum` (:code:`from enum import Enum`, only for string enums)"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:113
msgid ":code:`IntEnum` (:code:`from enum import IntEnum`, only for int enums)"
msgstr ""

#: ../../dispatcher/filters/callback_data.rst:118
msgid "Note that the integer Enum's should be always is subclasses of :code:`IntEnum` in due to parsing issues."
msgstr ""
